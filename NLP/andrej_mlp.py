# -*- coding: utf-8 -*-
"""andrej-MLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A-FIEaIynVINUJ1DwVFNCoTYHXMxS1LK
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import torch.nn as nn
import torch.nn.functional as F
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

words = open('names-dataset.txt', 'r').read().splitlines()
len(words)

chars = sorted(list(set(''.join(words))))
stoi  = {s:i+1 for i,s in enumerate(chars)}
stoi['.'] = 0
itos = {i:s for s,i in stoi.items()}
print(itos)

def build_dataset(words):
  X, Y = [], []
  for w in words:
    context = [0] * 6
    for ch in w + '.':
      ix = stoi[ch]
      X.append(context)
      Y.append(ix)
      context = context[1:] + [ix]
  X = torch.tensor(X)
  Y = torch.tensor(Y)
  return X, Y


import random
random.seed(42)
random.shuffle(words)
n1 = int(0.8*len(words))
n2 = int(0.9*len(words))
X,Y = build_dataset(words[:n1])
X_val, Y_val = build_dataset(words[n1:n2])
X_test, Y_test = build_dataset(words[n2:])

X.shape, Y.shape

g = torch.Generator().manual_seed(2147483647)
C = torch.randn((27,10), generator=g)
W1 = torch.randn((60,200), generator=g)
b1 = torch.randn(200, generator=g)
W2 = torch.randn((200, 27), generator=g)
b2 = torch.randn(27, generator=g)
parameters = [C, W1, b1, W2, b2]

for p in parameters:
  p.requires_grad = True

lre = torch.linspace(-3,0,1000)
lrs = 10**lre

for i in range(50000):
    ix = torch.randint(0, X.shape[0], (32,))
    emb = C[X[ix]]
    h = torch.tanh(emb.view(-1, 60) @ W1 + b1)
    logits = h @ W2 + b2
    loss = F.cross_entropy(logits, Y[ix])
    if loss.item() <= 0.1:
        break
    for p in parameters:
        p.grad = None
    loss.backward()
    lr = 10**-3
    for p in parameters:
        p.data += -lr * p.grad
    if loss.item() <= 1:
        break

loss.item()

emb = C[X_val]
h = torch.tanh(emb.view(-1, 60) @ W1 + b1)
logits = h @ W2 + b2
loss = F.cross_entropy(logits, Y_val)
loss.item()

emb = C[X_test]
h = torch.tanh(emb.view(-1, 60) @ W1 + b1)
logits = h @ W2 + b2
loss = F.cross_entropy(logits, Y_test)
loss.item()

g = torch.Generator().manual_seed(2147483647 +10)
for _ in range(20):
  out = []
  context = [0] * 6
  while True:
    emb = C[torch.tensor([context])]
    h = torch.tanh(emb.view(1, -1) @ W1 + b1)
    logits = h @ W2 + b2
    probs = F.softmax(logits, dim=1)
    ix = torch.multinomial(probs, num_samples=1, generator=g).item()
    context = context[1:] + [ix]
    out.append(ix)
    if ix == 0:
      break
  print(''.join(itos[i] for i in out))

