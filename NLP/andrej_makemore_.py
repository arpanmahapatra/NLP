# -*- coding: utf-8 -*-
"""andrej - MAKEMORE .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16PnAFNFHWwAcWGO4GhrtysS2920huF1m
"""

words = open('names-dataset.txt','r').read().splitlines()
words[:10]

len(words)

min(len(w) for w in words)

max(len(w) for w in words)

b = {}
for w in words:
  chs = ['<S>'] + list(w) + ['<E>']
  for ch1, ch2 in zip(chs, chs[1:]):
    bigram = (ch1,ch2)
    b[bigram] = b.get(bigram,0)+1

sorted(b.items(), key=lambda x: -x[1])

import torch

N = torch.zeros((27,27), dtype = torch.int32)

chars = sorted(list(set(''.join(words))))
stoi = {s:i+1 for i,s in enumerate(chars)}
stoi['.'] = 0
itos = {i:s for s,i in stoi.items()}

for w in words:
  chs = ['.'] + list(w)+['.']
  for ch1, ch2 in zip(chs, chs[1:]):
    ix1 = stoi[ch1]
    ix2 = stoi[ch2]
    N[ix1,ix2] += 1

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
plt.figure(figsize=(16,16))
plt.imshow(N, cmap='Blues')
for i in range(27):
  for j in range(27):
    chstr = itos[i] + itos[j]
    plt.text(j,i,chstr, ha='center', va='bottom', color='gray')
    plt.text(j,i,N[i,j].item(), ha='center', va='top', color='gray')
plt.axis('off')

# P = torch.zeros((27,27))
# for i in range(27):
#   P[i]  = N[i].float()
#   P[i] /= P[i].sum()
# P[0] or

P = (N+1).float()
P /= P.sum(1, keepdim=True)
P[0]

g = torch.Generator().manual_seed(2147483647)
for i in range(5):
  ix = 0
  out = []
  while True:
    p = P[ix]
    ix = torch.multinomial(p, num_samples=1, replacement=True, generator=g).item()
    out.append(itos[ix])
    if ix == 0:
      break
  print("".join(out))

import torch.nn.functional as F

log_likelihood = 0.0
n=0
for w in words:
# for w in ['arpan']:
  chs = ['.'] + list(w)+['.']
  for ch1, ch2 in zip(chs, chs[1:]):
    ix1 = stoi[ch1]
    ix2 = stoi[ch2]
    prob = P[ix1,ix2]
    n+=1
    logprob = - torch.log(prob)
    log_likelihood += logprob
    # print(f'{ch1}{ch2}: {prob:.4f} , {logprob:.4f}')

print(log_likelihood)
print(log_likelihood/n)

# create Training set of all the bigrams
xs, ys = [], [] #inputs and targets first and like next char
for w in words:
  chs = ['.'] + list(w)+['.']
  for ch1, ch2 in zip(chs, chs[1:]):
    ix1 = stoi[ch1]
    ix2 = stoi[ch2]
    xs.append(ix1)
    ys.append(ix2)

xs = torch.tensor(xs)
ys = torch.tensor(ys)
num = xs.nelement()
print('number of examples: ', num)
g = torch.Generator().manual_seed(2147483647)
W = torch.randn((27,27), generator=g, requires_grad=True)

(W**2).mean() # regularization term

for k in range(100):
    # Forward pass
    xenc = F.one_hot(xs, num_classes=27).float()
    logits = xenc @ W # log-counts
    counts = logits.exp()
    probs = counts / counts.sum(1, keepdim=True)
    loss = -probs[torch.arange(num),ys].log().mean() + 0.01*(W**2).mean()
    #Backward Pass
    W.grad = None
    loss.backward()
    #update parameters
    W.data += -50 * W.grad
    if loss.item()<0.01:
      break

print(loss.item())

g = torch.Generator().manual_seed(2147483647)
for i in range(5):
  ix = 0
  out = []
  while True:
    xenc = F.one_hot(torch.tensor([ix]), num_classes=27).float()
    logits = xenc @ W # log-counts
    counts = logits.exp()
    p = counts / counts.sum(1, keepdim=True)
    ix = torch.multinomial(p, num_samples=1, replacement=True, generator=g).item()
    out.append(itos[ix])
    if ix == 0:
      break
  print("".join(out))

